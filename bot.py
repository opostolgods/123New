import telebot
from telebot import types
import io
import requests
from datetime import datetime, timedelta

from config import BOT_TOKEN, CHANNEL_ID, CHANNEL_LINK, PHOTO_URL, SUB_PLANS, USERS_FILE, LEAK_OSINT_API_KEY, LEAK_OSINT_API_URL
from utils import get_user_profile, update_user_profile, safe_edit_message
from payment import create_invoice, check_invoice, pending_invoices
from html_report import generate_html_report
from ip_search import get_ip_info
from channel import get_tg_channels, send_results

bot = telebot.TeleBot(BOT_TOKEN)
search_results = {}

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        subscribed = not (member.status in ["left", "kicked"])
    except Exception:
        subscribed = False

    if not subscribed:
        text = "üì° <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.</b>"
        markup = types.InlineKeyboardMarkup()
        btn_channel = types.InlineKeyboardButton("üåñ –ö–∞–Ω–∞–ª", url=CHANNEL_LINK)
        btn_check = types.InlineKeyboardButton("üåë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_subscription")
        markup.add(btn_channel, btn_check)
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=markup)
    else:
        text = f"<b>‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!</b>\n\n" \
               "<b>üöÄ –ù–∞—à–∏ –ø–ª—é—Å—ã</b>\n" \
               "<blockquote>¬ª –ú—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n" \
               "¬ª –î–µ—à—ë–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n" \
               "¬ª –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</blockquote>\n\n" \
               "<b>–ú—ã –∑–Ω–∞–µ–º —á—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</b>"
        markup = types.InlineKeyboardMarkup()
        btn_search = types.InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data="search")
        btn_profile = types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        markup.add(btn_search, btn_profile)
        bot.send_photo(message.chat.id, PHOTO_URL, caption=text, parse_mode="HTML", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    user_id = call.from_user.id
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        subscribed = not (member.status in ["left", "kicked"])
    except Exception:
        subscribed = False

    if subscribed:
        safe_edit_message(bot, call, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å\n\n<blockquote><b>–ü—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∑–∞–Ω–æ–≥–æ</b></blockquote>")
    else:
        bot.answer_callback_query(call.id, "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile_callback(call):
    user_id = call.from_user.id
    profile = get_user_profile(user_id, USERS_FILE)
    sub_status = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    if profile.get("subscription"):
        if profile["subscription"] == "forever":
            sub_status = "–ù–∞–≤—Å–µ–≥–¥–∞"
        else:
            try:
                expiry = datetime.strptime(profile["subscription"], "%Y-%m-%d %H:%M:%S")
                if datetime.now() < expiry:
                    sub_status = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {profile['subscription']}"
            except:
                pass
    text = (
        "<b>üñ•Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"<blockquote>üíé –ü–æ–¥–ø–∏—Å–∫–∞ - <code>{sub_status}</code>\n"
        f"üë§ –ü–∞—Ä—Ç–Ω—ë—Ä - <code>{profile.get('partner', '–Ω–µ—Ç')}</code>\n"
        f"üÜî –ê–π–¥–∏ - <code>{user_id}</code></blockquote>"
    )
    markup = types.InlineKeyboardMarkup()
    btn_sub = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")
    markup.add(btn_sub, btn_back)
    safe_edit_message(bot, call, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main_callback(call):
    text = f"<b>‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {call.from_user.first_name}!</b>\n\n" \
           "<b>üöÄ –ù–∞—à–∏ –ø–ª—é—Å—ã</b>\n" \
           "<blockquote>¬ª –ú—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n" \
           "¬ª –î–µ—à—ë–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n" \
           "¬ª –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</blockquote>\n\n" \
           "<b>–ú—ã –∑–Ω–∞–µ–º —á—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</b>"
    markup = types.InlineKeyboardMarkup()
    btn_search = types.InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data="search")
    btn_profile = types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    markup.add(btn_search, btn_profile)
    safe_edit_message(bot, call, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "subscription")
def subscription_callback(call):
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω</b>"
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_week = types.InlineKeyboardButton("–ù–µ–¥–µ–ª—è - 1.5 $", callback_data="sub_week")
    btn_month = types.InlineKeyboardButton("–ú–µ—Å—è—Ü - 3.5 $", callback_data="sub_month")
    btn_forever = types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ - 10 $", callback_data="sub_forever")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")
    markup.add(btn_week, btn_month)
    markup.add(btn_forever, btn_back)
    safe_edit_message(bot, call, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_"))
def sub_plan_callback(call):
    user_id = call.from_user.id
    plan = call.data.split("_")[1]
    plan_info = SUB_PLANS.get(plan)
    if not plan_info:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.")
        return
    price = plan_info["price"]
    try:
        invoice = create_invoice("USDT", price)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞: {str(e)}")
        return
    pending_invoices[user_id] = {
        "invoice_id": invoice.invoice_id,
        "plan": plan
    }
    text = (
        f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ:</b> <code>{plan}</code>\n"
        f"<b>–¶–µ–Ω–∞:</b> <code>{price} $</code>\n\n"
        "<b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.</b>"
    )
    markup = types.InlineKeyboardMarkup()
    btn_invoice = types.InlineKeyboardButton("–°—á—ë—Ç", url=invoice.pay_url)
    btn_check = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_payment")
    markup.add(btn_invoice, btn_check)
    safe_edit_message(bot, call, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "check_payment")
def check_payment_callback(call):
    user_id = call.from_user.id
    if user_id not in pending_invoices:
        bot.answer_callback_query(call.id, "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        return
    invoice_id = pending_invoices[user_id]["invoice_id"]
    plan = pending_invoices[user_id]["plan"]
    invoice = check_invoice(invoice_id)
    if invoice is None:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.")
        return
    if invoice.status == 'active':
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif invoice.status == 'paid':
        if plan == "forever":
            expiry_str = "forever"
        else:
            expiry_date = datetime.now() + timedelta(days=SUB_PLANS[plan]["duration"])
            expiry_str = expiry_date.strftime("%Y-%m-%d %H:%M:%S")
        profile = get_user_profile(user_id, USERS_FILE)
        profile["subscription"] = expiry_str
        update_user_profile(user_id, profile, USERS_FILE)
        safe_edit_message(bot, call, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞, –ø–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞")
        pending_invoices.pop(user_id, None)
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã.")

@bot.callback_query_handler(func=lambda call: call.data == "search")
def search_callback(call):
    user_id = call.from_user.id
    profile = get_user_profile(user_id, USERS_FILE)
    sub_active = False
    if profile.get("subscription"):
        if profile["subscription"] == "forever":
            sub_active = True
        else:
            try:
                expiry = datetime.strptime(profile["subscription"], "%Y-%m-%d %H:%M:%S")
                if datetime.now() < expiry:
                    sub_active = True
            except:
                sub_active = False
    if not sub_active:
        safe_edit_message(bot, call, "–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–∏—Å–∫—É.")
    else:
        text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ üîé</b>"
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_ip = types.InlineKeyboardButton("–ê–π–ø–∏", callback_data="search_ip")
        btn_probiv = types.InlineKeyboardButton("–ü—Ä–æ–±–∏–≤", callback_data="search_probiv")
        btn_channel = types.InlineKeyboardButton("–ö–∞–Ω–∞–ª—ã", callback_data="search_channel")
        btn_telegraph = types.InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞—Ñ", callback_data="search_telegraph")
        markup.add(btn_ip, btn_probiv, btn_channel, btn_telegraph)
        safe_edit_message(bot, call, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "search_ip")
def search_ip_callback(call):
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–ø–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞</b>"
    safe_edit_message(bot, call, text)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_ip_search)

def process_ip_search(message):
    ip = message.text.strip()
    if not ip:
        bot.send_message(message.chat.id, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    try:
        ip_info = get_ip_info(ip)
        if ip_info and ip_info.get("status") == "success":
            result = f"""\`\`\`
IP: {ip_info.get('query', '–ù/–î')}
–°—Ç—Ä–∞–Ω–∞: {ip_info.get('country', '–ù/–î')} ({ip_info.get('countryCode', '–ù/–î')})
–†–µ–≥–∏–æ–Ω: {ip_info.get('regionName', '–ù/–î')} ({ip_info.get('region', '–ù/–î')})
–ì–æ—Ä–æ–¥: {ip_info.get('city', '–ù/–î')}
–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {ip_info.get('zip', '–ù/–î')}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {ip_info.get('lat', '–ù/–î')}, {ip_info.get('lon', '–ù/–î')}
–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {ip_info.get('timezone', '–ù/–î')}
–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {ip_info.get('isp', '–ù/–î')}
–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {ip_info.get('org', '–ù/–î')}
AS: {ip_info.get('as', '–ù/–î')}
\`\`\`"""
            bot.send_message(message.chat.id, result, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ IP: {ip_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "search_probiv")
def search_probiv_callback(call):
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞</b>"
    safe_edit_message(bot, call, text)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, do_search)

def do_search(message):
    query = message.text.strip()
    if not query:
        bot.send_message(message.chat.id, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = {
        "token": LEAK_OSINT_API_KEY,
        "request": query,
        "limit": 100,
        "lang": "ru"
    }
    try:
        response = requests.post(LEAK_OSINT_API_URL, json=data, timeout=10)
        if response.status_code == 200:
            api_data = response.json()
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ API:\n–ö–æ–¥: {response.status_code}\n–û—Ç–≤–µ—Ç: {response.text}")
            return
    except Exception as e:
        bot.send_message(message.chat.id, f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return
    html_report = generate_html_report(api_data)
    file_bytes = html_report.encode("utf-8")
    file_obj = io.BytesIO(file_bytes)
    file_obj.name = "result.html"
    bot.send_document(message.chat.id, file_obj, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "search_channel")
def search_channel_callback(call):
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</b>"
    safe_edit_message(bot, call, text)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_channel_search)

def process_channel_search(message):
    query = message.text.strip()
    if not query:
        bot.send_message(message.chat.id, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    bot.send_message(message.chat.id, "‚è≥ –ò—â–µ–º –∫–∞–Ω–∞–ª—ã...")
    results, search_url = get_tg_channels(query)
    if results:
        search_results[message.chat.id] = {
            "results": results,
            "page": 0,
            "search_url": search_url,
            "message_id": None
        }
        send_results(bot, message.chat.id, results, 0, search_url)
    else:
        bot.send_message(
            message.chat.id,
            "<b>‚ùå –û—à–∏–±–∫–∞:</b> <i>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>",
            parse_mode='HTML'
        )

@bot.callback_query_handler(func=lambda call: call.data == "search_telegraph")
def search_telegraph_callback(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "api error 200")

@bot.callback_query_handler(func=lambda call: call.data.startswith("page_"))
def handle_page_change(call):
    if call.message.chat.id not in search_results:
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–∞—á–∞–ª–∞")
        return

    page = int(call.data.split("_")[1])
    data = search_results[call.message.chat.id]
    send_results(
        bot,
        call.message.chat.id,
        data["results"],
        page,
        data["search_url"],
        call.message.message_id
    )
    search_results[call.message.chat.id]["page"] = page
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "noop")
def handle_noop(call):
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("download_"))
def handle_download(call):
    if call.message.chat.id not in search_results:
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–∞—á–∞–ª–∞")
        return

    _, start_index, end_index = call.data.split("_")
    start_index, end_index = int(start_index), int(end_index)
    results = search_results[call.message.chat.id]["results"]
    
    txt_content = ""
    for i in range(start_index, end_index):
        channel = results[i]
        txt_content += f"{i + 1}. {channel['name']} - {channel['url']}\n"
    
    file_obj = io.BytesIO(txt_content.encode('utf-8'))
    file_obj.name = "channels.txt"
    
    bot.send_document(
        call.message.chat.id,
        document=file_obj,
        caption=f"üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ({start_index + 1}-{end_index})"
    )
    bot.answer_callback_query(call.id, "‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@bot.callback_query_handler(func=lambda call: call.data == "new_search")
def handle_new_search(call):
    if call.message.chat.id in search_results:
        del search_results[call.message.chat.id]
    
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ üîé</b>"
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_ip = types.InlineKeyboardButton("–ê–π–ø–∏", callback_data="search_ip")
    btn_probiv = types.InlineKeyboardButton("–ü—Ä–æ–±–∏–≤", callback_data="search_probiv")
    btn_channel = types.InlineKeyboardButton("–ö–∞–Ω–∞–ª—ã", callback_data="search_channel")
    btn_telegraph = types.InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞—Ñ", callback_data="search_telegraph")
    markup.add(btn_ip, btn_probiv, btn_channel, btn_telegraph)
    safe_edit_message(bot, call, text, reply_markup=markup)

bot.polling(non_stop=True)

